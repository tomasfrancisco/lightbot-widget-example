{"version":3,"sources":["App.tsx","index.tsx"],"names":["AppDisconnected","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","transformMessages","messages","map","message","author","sender","state","bot","user","text","label","addNewMessage","event","sendMessage","type","countReplayLength","question","concat","length","onToggle","toggleMessenger","id","avatarUrl","nextProps","console","log","_this$props","isMessengerOpen","resetAgent","react_default","a","createElement","onClick","main","onMessageSend","placeholder","width","Component","App","withLightbotMessenger","hostURL","agentId","ReactDOM","render","App_App","document","getElementById"],"mappings":"gSAkBMA,cAOJ,SAAAA,EAAYC,GAAiB,IAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAC3BE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAcDQ,kBAAoB,SAACC,GAC1B,OAAOA,EAASC,IAAa,SAAAC,GAAO,MAAK,CACvCC,OAA2B,QAAnBD,EAAQE,OAAmBZ,EAAKa,MAAMC,IAAMd,EAAKa,MAAME,KAC/DC,KAAMN,EAAQO,UAlBWjB,EA0B7BkB,cAAgB,SAACC,GACfnB,EAAKD,MAAMqB,YAAY,CACrBC,KAAM,QACNJ,MAAOE,EAAMT,QAAQM,QA7BIhB,EAiC7BsB,kBAAoB,SAACC,GACnB,SAAAC,OAAUD,EAAV,sBAAAC,OACED,EAAWA,EAASE,OAAS,EAD/B,cAlC2BzB,EA6DrB0B,SAAW,WACjB1B,EAAKD,MAAM4B,mBA9DgB,OAM3B3B,EAAKa,MAAQ,CACXC,IALU,CACVc,GAAI,GAKJb,KAAM,CACJa,GAAI,EACJC,UAAW,qDAVY7B,yFAsBI8B,GAC/BC,QAAQC,IAAI,gBAAiBF,oCAgBtB,IACCf,EAASZ,KAAKU,MAAdE,KADDkB,EAE2C9B,KAAKJ,MAA/CS,EAFDyB,EAECzB,SAAU0B,EAFXD,EAEWC,gBAAiBC,EAF5BF,EAE4BE,WACnC,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,UAAQC,QAASpC,KAAKuB,UACnBQ,EAAkB,QAAU,QAE/BE,EAAAC,EAAAC,cAAA,UAAQC,QAASJ,GAAjB,eACCD,GACCE,EAAAC,EAAAC,cAACE,EAAA,EAAD,CACEzB,KAAMA,EACNP,SAAUL,KAAKI,kBAAkBC,GACjCiC,cAAetC,KAAKe,cACpBwB,YAAa,oBACbC,MAAO,cA7DWC,aAyEjBC,EAAMC,gCAAgC,CACjDC,QAAS,yCACTC,QAAS,wCAFQF,CAGhBhD,GCzFHmD,IAASC,OAAOd,EAAAC,EAAAC,cAACa,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.960e9939.chunk.js","sourcesContent":["import \"./App.css\";\nimport \"@progress/kendo-theme-default/dist/all.css\";\n\nimport {\n  LightbotMessengerDecoratedProps,\n  withLightbotMessenger,\n  LightbotMessage\n} from \"@lightbase/lightbot/lib/lightbot-react\";\nimport {\n  Chat,\n  ChatMessageSendEvent,\n  Message,\n  User\n} from \"@progress/kendo-react-conversational-ui\";\nimport React, { Component } from \"react\";\n\ninterface AppProps extends LightbotMessengerDecoratedProps {}\n\nclass AppDisconnected extends Component<\n  AppProps,\n  {\n    bot: User;\n    user: User;\n  }\n> {\n  constructor(props: AppProps) {\n    super(props);\n    const bot = {\n      id: 0\n    };\n\n    this.state = {\n      bot,\n      user: {\n        id: 1,\n        avatarUrl: \"https://via.placeholder.com/24/008000/008000.png\"\n      }\n    };\n  }\n\n  public transformMessages = (messages: LightbotMessage[]): Message[] => {\n    return messages.map<Message>(message => ({\n      author: message.sender === \"bot\" ? this.state.bot : this.state.user,\n      text: message.label\n    }));\n  };\n\n  public componentWillReceiveProps(nextProps: any) {\n    console.log(\"receive props\", nextProps);\n  }\n\n  addNewMessage = (event: ChatMessageSendEvent) => {\n    this.props.sendMessage({\n      type: \"plain\",\n      label: event.message.text as string\n    });\n  };\n\n  countReplayLength = (question?: string) => {\n    return `${question} contains exactly ${\n      question ? question.length : 0\n    } symbols.`;\n  };\n\n  render() {\n    const { user } = this.state;\n    const { messages, isMessengerOpen, resetAgent } = this.props;\n    return (\n      <div>\n        <button onClick={this.onToggle}>\n          {isMessengerOpen ? \"Close\" : \"Open\"}\n        </button>\n        <button onClick={resetAgent}>Reset agent</button>\n        {isMessengerOpen && (\n          <Chat\n            user={user}\n            messages={this.transformMessages(messages)}\n            onMessageSend={this.addNewMessage}\n            placeholder={\"Type a message...\"}\n            width={400}\n          />\n        )}\n      </div>\n    );\n  }\n\n  private onToggle = () => {\n    this.props.toggleMessenger();\n  };\n}\n\nexport const App = withLightbotMessenger<AppProps>({\n  hostURL: \"https://api.lightbot.io/v1/passthrough\",\n  agentId: \"25143bb9-70e7-4b47-98b4-7a745db72781\"\n})(AppDisconnected);\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}